% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app

% This script assumes these variables are defined:
%
%   Input - input data.
%   Target - target data.

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 5);

% Specify sheet and range
opts.Sheet = "Sheet1";
opts.DataRange = "A3:E36";

% Specify column names and types
opts.VariableNames = ["ContactTime", "pH", "InitialDyeConcentrationmgLOrPpm", "AdsorbentDosageg", "TemperatureK"];
opts.VariableTypes = ["double", "double", "double", "double", "double"];

% Import the data
ANNinputnew = readtable("C:\Users\Lenovo\Downloads\NaOH_modellig_new.xlsx\ANNinputnew", opts, "UseExcel", false);

%% Convert to output type
ANNinputnew = table2array(ANNinputnew);

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 1);

% Specify sheet and range
opts.Sheet = "Adsorption capacity";
opts.DataRange = "A3:A36";

% Specify column names and types
opts.VariableNames = "AdsorptionCapacitymgg";
opts.VariableTypes = "double";

% Import the data
ANNdataoutput3 = readtable("C:\Users\Lenovo\Downloads\NaOH_modellig_new\ANNdataoutput3", opts, "UseExcel", false);

%% Convert to output type
ANNdataoutput3 = table2array(ANNdataoutput3);
x=ANNinputnew';
t=ANNdataoutput3';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 14;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net, tr] = train(net, x, t);

% Test the Network
y_train = net(x(:, tr.trainInd));
y_val = net(x(:, tr.valInd));
y_test = net(x(:, tr.testInd));

% Calculate performance for each set
performance_train = perform(net, t(:, tr.trainInd), y_train);
performance_val = perform(net, t(:, tr.valInd), y_val);
performance_test = perform(net, t(:, tr.testInd), y_test);

% Display performance for each set
fprintf('Performance on Training Set: %f\n', performance_train);
fprintf('Performance on Validation Set: %f\n', performance_val);
fprintf('Performance on Testing Set: %f\n', performance_test);

% View the Network
view(net);

% Load outsample data for optimization
op = ANNinputnew';
predicted_values = net(op(:, :));
predicted_values = predicted_values';

% Display predicted values for training, validation, and testing sets
fprintf('\nPredicted Values for Training Set:\n');
disp(predicted_values(tr.trainInd));

fprintf('\nPredicted Values for Validation Set:\n');
disp(predicted_values(tr.valInd));

fprintf('\nPredicted Values for Testing Set:\n');
disp(predicted_values(tr.testInd));

% Calculate and display errors for each set
ANN_Error_train = ANNdataoutput3(tr.trainInd) - predicted_values(tr.trainInd);
ANN_Error_val = ANNdataoutput3(tr.valInd) - predicted_values(tr.valInd);
ANN_Error_test = ANNdataoutput3(tr.testInd) - predicted_values(tr.testInd);

fprintf('\nErrors for Training Set:\n');
disp(ANN_Error_train);

fprintf('\nErrors for Validation Set:\n');
disp(ANN_Error_val);

fprintf('\nErrors for Testing Set:\n');
disp(ANN_Error_test);

% Plots (Uncomment these lines to enable various plots)
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, ploterrhist([e(tr.trainInd); e(tr.valInd); e(tr.testInd)])
% figure, plotregression([t(:, tr.trainInd), t(:, tr.valInd), t(:, tr.testInd)], [y_train; y_val; y_test])
% figure, plotfit(net, x, t)


